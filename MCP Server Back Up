#!/usr/bin/env node

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} from '@modelcontextprotocol/sdk/types.js';
import fs from 'fs';
import path from 'path';

// Create server instance
const server = new Server(
  {
    name: 'collin-complete-real-estate-mcp',
    version: '4.1.0',
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// Complete Real Estate Analysis + GHL Integration + ENHANCED DUAL MEMORY SEARCH
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      // [ALL YOUR EXISTING TOOLS REMAIN THE SAME - just showing memory tools here for brevity]
      
      // GHL CONTACT PROCESSOR
      {
        name: 'process_ghl_contact',
        description: 'Fetch GHL contact data via API and extract property details for analysis tools',
        inputSchema: {
          type: 'object',
          properties: {
            contactId: { type: 'string', description: 'GHL contact ID (e.g., FtxltXgHl6TM6S0OYObj)' },
            contactName: { type: 'string', description: 'Contact name for lookup (alternative to ID)' },
            analysisMode: { type: 'string', enum: ['both_scenarios', 'seller_finance_only', 'cash_only'], default: 'both_scenarios', description: 'Which analysis to prepare data for' }
          }
        }
      },

      // UNIFIED DEAL ANALYZER
      {
        name: 'analyze_deal_unified',
        description: 'Run both seller finance and cash wholesale analysis side-by-side for comparison (seller chooses approach)',
        inputSchema: {
          type: 'object',
          properties: {
            propertyAddress: { type: 'string', description: 'Property address' },
            arv: { type: 'number', description: 'After Repair Value estimate' },
            askingPrice: { type: 'number', description: 'Current asking/purchase price' },
            monthlyRent: { type: 'number', description: 'Expected monthly rent' },
            repairCosts: { type: 'number', description: 'Estimated repair costs (no default - flag if missing)' },
            propertyTax: { type: 'number', description: 'Monthly property tax (no default - flag if missing)' },
            insurance: { type: 'number', description: 'Monthly insurance (no default - flag if missing)' },
            marketLocation: { type: 'string', enum: ['detroit', 'cleveland', 'birmingham', 'atlanta', 'nashville', 'memphis', 'indianapolis', 'competitive', 'stable', 'emerging'], default: 'competitive', description: 'Market for formulas' }
          },
          required: ['arv', 'askingPrice', 'monthlyRent']
        }
      },

      // SELLER FINANCE ANALYSIS
      {
        name: 'analyze_seller_finance_deal',
        description: 'Complete seller finance analysis using Skywatch calculator logic with deal qualification',
        inputSchema: {
          type: 'object',
          properties: {
            purchasePrice: { type: 'number', description: 'Purchase price of property' },
            downPaymentAmount: { type: 'number', description: 'Down payment in dollars (not percentage)' },
            monthlyRent: { type: 'number', description: 'Expected monthly rent' },
            propertyTax: { type: 'number', description: 'Monthly property tax (varies by location - REQUIRED)' },
            insurance: { type: 'number', description: 'Monthly insurance (varies by property - REQUIRED)' },
            interestRate: { type: 'number', description: 'Interest rate percentage (e.g., 5.5 for 5.5%) - REQUIRED' },
            amortization: { type: 'number', description: 'Amortization period in years - REQUIRED' },
            balloonYears: { type: 'number', description: 'Balloon term in years - REQUIRED' },
            capexMaintPercent: { type: 'number', default: 10, description: 'CapEx & Maintenance as % of rent' },
            managementPercent: { type: 'number', default: 10, description: 'Management as % of rent' },
            vacancyPercent: { type: 'number', default: 0, description: 'Vacancy as % of rent' },
            rehabCosts: { type: 'number', default: 0, description: 'Estimated rehab costs' },
            assignmentFees: { type: 'number', default: 5000, description: 'Assignment/wholesale fees' },
            agentCommissionRate: { type: 'number', default: 3, description: 'Agent commission percentage' },
            appreciationPercent: { type: 'number', default: 3, description: 'Annual appreciation percentage' },
            hoa: { type: 'number', default: 0, description: 'Monthly HOA fees' },
            other: { type: 'number', default: 0, description: 'Other monthly expenses' },
            propertyAddress: { type: 'string', description: 'Property address (optional - for reference only)' },
            outputMode: { type: 'string', enum: ['comprehensive', 'summary'], default: 'comprehensive', description: 'Analysis detail level' }
          },
          required: ['purchasePrice', 'downPaymentAmount', 'monthlyRent', 'propertyTax', 'insurance', 'interestRate', 'amortization', 'balloonYears']
        }
      },

      // CASH WHOLESALE ANALYSIS
      {
        name: 'analyze_cash_wholesale_deal',
        description: 'Comprehensive cash wholesale analysis using rent-ready property formulas and market-specific factors',
        inputSchema: {
          type: 'object',
          properties: {
            propertyAddress: { type: 'string', description: 'Property address for reference' },
            arv: { type: 'number', description: 'After Repair Value (ARV) - use investor comparables, not retail' },
            monthlyRent: { type: 'number', description: 'Expected monthly rental income' },
            repairCosts: { type: 'number', description: 'Estimated repair costs for rent-ready condition (REQUIRED - no default)' },
            marketLocation: { type: 'string', enum: ['detroit', 'cleveland', 'birmingham', 'atlanta', 'nashville', 'memphis', 'indianapolis', 'competitive', 'stable', 'emerging'], default: 'competitive', description: 'Market type for formula adjustments' },
            buyerType: { type: 'string', enum: ['individual', 'institutional', 'fix_flip', 'buy_hold'], default: 'buy_hold', description: 'Target cash buyer type' },
            targetCapRate: { type: 'number', default: 10, description: 'Target cap rate percentage for buyer (8-12% typical)' },
            minimumAssignmentFee: { type: 'number', default: 5000, description: 'Minimum assignment fee regardless of percentage' },
            assignmentFeePercent: { type: 'number', default: 10, description: 'Assignment fee percentage (used if higher than minimum)' }
          },
          required: ['arv', 'monthlyRent', 'repairCosts']
        }
      },

      // COMMUNICATION TOOLS
      {
        name: 'analyze_message_and_respond',
        description: 'Analyze incoming GHL message, underwrite property if needed, generate intelligent response',
        inputSchema: {
          type: 'object',
          properties: {
            messageContent: { type: 'string', description: 'The actual message content from seller/agent' },
            senderInfo: { type: 'string', description: 'Information about who sent the message' },
            propertyAddress: { type: 'string', description: 'Property address if mentioned in message' },
            messageType: { type: 'string', enum: ['interest', 'question', 'negotiation', 'general'], description: 'Type of message' },
            previousContext: { type: 'string', default: '', description: 'Any previous conversation context' }
          },
          required: ['messageContent', 'messageType']
        }
      },

      {
        name: 'generate_seller_response',
        description: 'Generate personalized response to seller based on analysis and inquiry type',
        inputSchema: {
          type: 'object',
          properties: {
            analysisResult: { type: 'string', description: 'Results from property analysis or underwriting' },
            responseType: { type: 'string', enum: ['initial_interest', 'offer_presentation', 'negotiation', 'follow_up', 'information_request'], description: 'Type of response needed' },
            sellerPersonality: { type: 'string', enum: ['motivated', 'analytical', 'emotional', 'business_focused', 'uncertain'], default: 'business_focused', description: 'Seller personality assessment' },
            offerAmount: { type: 'number', description: 'Calculated offer amount if applicable' },
            financingOptions: { type: 'string', description: 'Seller financing options to present' }
          },
          required: ['analysisResult', 'responseType']
        }
      },

      // WEEK IN REVIEW
      {
        name: 'generate_week_in_review',
        description: 'Comprehensive analysis of weekly offers (250+) across all 5 GHL custom fields with error detection and trends',
        inputSchema: {
          type: 'object',
          properties: {
            weekEndingDate: { type: 'string', description: 'Week ending date (e.g., "December 8, 2024")' },
            ghlContactData: { type: 'string', description: 'Raw GHL contact data from the week (all 5 custom fields)' },
            deliveryMethod: { 
              type: 'string',
              enum: ['gmail_report', 'google_drive_doc', 'both', 'display_only'],
              default: 'both',
              description: 'How to deliver the analysis'
            },
            focusAreas: {
              type: 'array',
              items: { 
                type: 'string',
                enum: ['error_detection', 'quality_control', 'trend_analysis', 'process_optimization', 'comprehensive']
              },
              default: ['error_detection', 'quality_control', 'trend_analysis'],
              description: 'Areas to focus analysis on'
            },
            includeHistoricalComparison: { 
              type: 'boolean', 
              default: true, 
              description: 'Compare to previous weeks from memory system' 
            }
          },
          required: ['weekEndingDate', 'ghlContactData']
        }
      },

      // ENHANCED MEMORY SYSTEM TOOLS - NOW WITH DUAL DIRECTORY SEARCH
      {
        name: 'process_business_memory',
        description: 'Process current conversation into structured business memory with progress tracking',
        inputSchema: {
          type: 'object',
          properties: {
            conversationText: { type: 'string', description: 'The current conversation content to analyze' },
            sessionTopic: { type: 'string', description: 'Main topic or focus of this session' },
            currentContext: { type: 'string', default: 'General business discussion', description: 'What we were working on or building' }
          },
          required: ['conversationText', 'sessionTopic']
        }
      },

      {
        name: 'save_business_memory',
        description: 'Save processed business memory to persistent storage with search capability',
        inputSchema: {
          type: 'object',
          properties: {
            processedMemory: { type: 'string', description: 'The formatted business memory content to save' },
            sessionTopic: { type: 'string', description: 'Topic for filename and categorization' },
            priority: { type: 'string', default: 'medium', description: 'Priority level: high, medium, low' }
          },
          required: ['processedMemory', 'sessionTopic']
        }
      },

      // 🔥 ENHANCED DUAL DIRECTORY SEARCH
      {
        name: 'search_memories',
        description: 'Search through ALL saved memories (both business and legacy directories)',
        inputSchema: {
          type: 'object',
          properties: {
            searchTerm: { type: 'string', description: 'Term or phrase to search for in memories' },
            category: { type: 'string', enum: ['all', 'business', 'legacy'], default: 'all', description: 'Search scope: all directories, business only, or legacy only' },
            timeframe: { type: 'string', default: 'all', description: 'Optional time filter: week, month, all' }
          },
          required: ['searchTerm']
        }
      }
    ]
  };
});

// Tool execution handler with ENHANCED MEMORY SEARCH
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    // [ALL YOUR EXISTING TOOL IMPLEMENTATIONS REMAIN THE SAME]
    // [Only showing the enhanced search_memories implementation here]

    // ENHANCED DUAL DIRECTORY MEMORY SEARCH
    if (name === 'search_memories') {
      const { searchTerm, category = 'all', timeframe = 'all' } = args;
      
      // Define both memory directories
      const businessMemoriesDir = path.join(process.cwd(), 'memories');
      const legacyMemoriesDir = path.join(process.env.HOME, 'legacy-memories');
      
      const results = [];
      let totalBusinessFiles = 0;
      let totalLegacyFiles = 0;

      // Search Business Memories (if category allows)
      if (category === 'all' || category === 'business') {
        if (fs.existsSync(businessMemoriesDir)) {
          const businessFiles = fs.readdirSync(businessMemoriesDir).filter(f => f.endsWith('.md'));
          totalBusinessFiles = businessFiles.length;
          
          businessFiles.forEach(file => {
            const content = fs.readFileSync(path.join(businessMemoriesDir, file), 'utf8');
            if (content.toLowerCase().includes(searchTerm.toLowerCase())) {
              const preview = content.substring(0, 200) + '...';
              results.push({
                source: 'BUSINESS',
                file: file,
                preview: preview,
                path: path.join(businessMemoriesDir, file)
              });
            }
          });
        }
      }

      // Search Legacy Memories (if category allows)
      if (category === 'all' || category === 'legacy') {
        if (fs.existsSync(legacyMemoriesDir)) {
          const legacyFiles = fs.readdirSync(legacyMemoriesDir).filter(f => f.endsWith('.md'));
          totalLegacyFiles = legacyFiles.length;
          
          legacyFiles.forEach(file => {
            const content = fs.readFileSync(path.join(legacyMemoriesDir, file), 'utf8');
            if (content.toLowerCase().includes(searchTerm.toLowerCase())) {
              const preview = content.substring(0, 200) + '...';
              results.push({
                source: 'LEGACY',
                file: file,
                preview: preview,
                path: path.join(legacyMemoriesDir, file)
              });
            }
          });
        }
      }

      // Format results with source labels
      const formattedResults = results.slice(0, 10).map(result => 
        `**📁 [${result.source}] ${result.file.replace('.md', '').toUpperCase()}**\n${result.preview}`
      );

      // Generate search summary
      const searchScope = category === 'all' ? 'ALL MEMORIES' : 
                         category === 'business' ? 'BUSINESS MEMORIES' : 'LEGACY MEMORIES';
      
      const directoriesSearched = [];
      if (category === 'all' || category === 'business') {
        directoriesSearched.push(`Business: ${totalBusinessFiles} files`);
      }
      if (category === 'all' || category === 'legacy') {
        directoriesSearched.push(`Legacy: ${totalLegacyFiles} files`);
      }

      return {
        content: [{
          type: 'text',
          text: `🔍 **DUAL MEMORY SEARCH RESULTS**

**Search Term:** "${searchTerm}"
**Scope:** ${searchScope}
**Directories:** ${directoriesSearched.join(' | ')}
**Results Found:** ${results.length} total, showing ${Math.min(results.length, 10)}

${results.length > 0 ? formattedResults.join('\n\n') : '❌ No matches found in any memory directory.'}

${results.length > 10 ? '\n💡 **Showing first 10 results. Use more specific search terms to narrow results.**' : ''}

💡 **Search tips:** Use \`category: "business"\` or \`category: "legacy"\` to search specific directories only.`
        }]
      };
    }

    // [ALL OTHER EXISTING TOOL IMPLEMENTATIONS GO HERE - UNCHANGED]
    // [Including: process_ghl_contact, analyze_deal_unified, analyze_seller_finance_deal, etc.]

    throw new McpError(ErrorCode.MethodNotFound, `Unknown tool: ${name}`);
  } catch (error) {
    throw new McpError(ErrorCode.InternalError, `Tool execution failed: ${error.message}`);
  }
});

// Start the server
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  // MCP Server ready - no console.log output to avoid JSON parsing errors
}
main().catch((error) => {
  console.error('Server error:', error);
  process.exit(1);
});
